\documentclass[a4j]{jarticle}

\title{プログラミング演習\\中間レポート}
\author{\\学籍番号：09425566\\氏名：戸塚佑太}
\date{出題日：2013/05/29\\提出日：2013/05/26\\締切り日：2013/05/26\\}

\begin{document}
\maketitle

\newpage


%
%	SECTION 1
%

\section{概要}

このレポートでは，標準入力からカンマ区切りのCSV形式のファイル，またはCSVデータを入力し，それら1行ずつ読み込み，区切りごとにid,name,birth,addr,commentの5つの項目に分けて格納し，表示するプログラムを作成する途中過程を示すものである。

\begin{enumerate}
\item 格納するデータを構造体として表現．指定されたデータ構造は以下の通りである．

\begin{center}
\begin{tabular}{|c|c|c|c|c|}\hline
\centering
ID&学校名&設立年月日&所在地&備考データ\\\hline
32bit整数&70bytes&struct date&70bytes&任意長\\\hline
\end{tabular}
\end{center}

この構造体を配列として10000件のデータを格納できるように宣言する．

\item 標準入力からの入力をCSV形式として読み込み，上記に指定された構造体の配列に格納する．SCVの形式は次の通り．

{\baselineskip 3mm
\begin{verbatim}
 0,Takahashi Kazuyuki,1977-04-27,Saitama,Fukuoka Softbank Howks
 1,Yuta Totsuka,1993-04-24,Okayama,Kurashiki
 2,Kubo Shota,1993-04-16,Ehime,Matuyamakita
 3,Oigawa Satoshi,1993-04-18,Shimane,Matueminami
 .
 .
\end{verbatim}
}

\item ％から始まる文はCSV入力ではなくコマンドとみなして処理を行う.今回は％Q,％C,％Pコマンドのみ実装し、それぞれのコマンドは次の動作を行うよう実装する。

\begin{center}
\begin{tabular}{|c|c|c|}\hline
コマンド&意味&備考\\ \hline
％Q&終了(Quit)&\\ \hline
％C&登録件数の表示(Check)&\\ \hline
％P n&先頭からn件表示&n=0:全件表示,n$<$0:後ろから-n件表示\\ \hline
\end{tabular}
\end{center}

\end{enumerate}


%
%	SECTION 2
%

\section{プログラムの作成方針}

今回のプログラムは大きなプログラムとなるので，いくつかの処理に分けて関数を作成する。
処理の概要は以下の通りに定め、下記でそれぞれについて解説する。
\begin{itemize}
\item[(1)]格納を行う構造体の宣言部
\item[(2)]標準入力からの文章を1行読み込む
\item[(3)]標準入力データがCSVの場合の処理
\item[(4)]標準入力データがコマンドの場合の処理
\end{itemize}

まず、(1)格納を行う構造体の宣言部　については、概要で示した通りにデータを格納できるよう宣言する．

{\baselineskip 3mm
\begin{verbatim}
struct date{
  int y;
  int m;
  int d;
};

struct profile{
  int id;
  char name[MAX_STR_LEN+1];
  struct date birth;
  char home[MAX_STR_LEN+1];
  char *comment;
};

struct profile profile_data_store[MAX_PROFILES];
\end{verbatim}
}


{\baselineskip 3mm
\begin{verbatim}

(2)標準入力からの文章を1行読み込む　は主にget_line,subst,perse_lineの部分で処理を行っている．標準入力されたデータをchar *lineで1行分読み込み、1文字目が%であれば2文字目以降のコマンドと引数を別関数の引数とし，各コマンドに応じた処理を行う。また、１文字目が％でない場合はこの1行をCSV形式の文とみなし，カンマ ',' を区切りとして5つの文字列として分割する．

(3)標準入力データがCSVの場合の処理　はnew_profile,new_date,splitの部分で処理を行っている．標準入力されたデータがCSVデータだった場合，1行毎に文字列として分割し，これらをnew_profileに送り，項目毎に適切な方に変換し，それぞれ構造体のメンバに代入する．文字列の場合はそのまま代入を行うためにstrncpy,数値の場合はatoiを使い変数変換を行い代入・格納する．設立年月日の部分(2013-6-6)の文字列もnew_dateに送り，'-'を区切りとして同様に文字列として分割し，数値変換を行ってから変数に格納する．
また，分割して送られてきた文字列はstrncpyを使用し，メモリ間のコピーを行わなければならないことに注意しなければならない．

(4)標準入力データがコマンドの場合の処理　は各コマンドの実現部分であり，プログラムの終了，登録件数・登録項目の表示を行う部分である．プログラムの終了はexit(0)を使用することにより，コマンド入力後に処理が停止する．登録件数はprintfで表示する．登録項目の表示は3文字目以降の引数の件数分(n件)をそれぞれ場合分けしてprintfで表示させる．場合分けの方法は、概要の示している通りに行っている．また登録件数を越えた引数(|nitems|>n)が送られた場合はerrorが表示されるようになっている．

\end{verbatim}
}

%
%	SECTION 3
%

\section{プログラムの主な構造とその説明}

\begin{verbatim}
　完成したプログラムを末尾に添付する．このセクションでは、プログラムの主な構造について説明する．
まず，8-20行付近はstruct dataのデータ型の宣言部とそれを扱う関数の宣言部である．次に，subst,splitを26-56行付近で宣言している．substはstrの文字列中のc1をc2へと変換する．ここでは','を'\0'へと変換している．splitでは送られてきたstrの文字列中の区切りsepで分割し，substと同様に','へと'\0'変換し，分割したものをret[]に格納している．これらの文字列を示す複数からなる配列を返す．また"2013-06-06"のような日付を分けるために分割文字を'-'としてstruct_dateで同様の処理を行っている．
次に58-67,195-226付近のget_line,perse_line,mainでは標準入力され文章を1行ごと読み込み，解析し，データが%から始まっていればコマンド文字と引数をexec_commandに送る．そうでなければ一行をnew_profileに送る．
また73-123行付近のnew_profile,new_dateでは解析を行い，送られてきた一行を分割し，格納を行う．ここで，"2013/06/07"のように'-'で区切られず，間違った形式で入力された場合は処理されず，はじかれる．上記のsplitで分割した無事列配列を構造体の宣言部のデータ型に変換し，代入を行っている．文字列はstrncpy,数値はatoi関数を使用．これらをprofile_data_storeに格納している．profile_data_storeに格納できる件数は最大10000件となっている

\end{verbatim}

%
%	SECTION 4
%

\section{プログラムの使用例・テスト}

本プログラムは名簿データを管理するためのプログラムである．標準入力されたCSV形式のデータまたはファイル，％から始まるコマンドに応じた処理をし，処理結果を標準出力に表示する．入力形式については概要を参照．
本プログラム(main.c)をgccによりコンパイルし，test.csvというCSVファイルの読み込み（入力）を行ったとする．

{\baselineskip 3mm
\begin{verbatim}
% gcc main.c
% ./a.out < test.csv
\end{verbatim}
}

test.csvは以下の通りである．

{\baselineskip 3mm
\begin{verbatim}

1,Takahashi Kazuyuki,1977-04-27,Saitama,Fukuoka Softbank Howks
2,Yuta Totsuka,1993-04-24,Okayama,Kurashiki
3,Kubo Shota,1993-04-16,Ehime,Matuyamakita
4,Oigawa Satoshi,1993-04-18,Shimane,Matueminami
%P 0
%P 2
%P -2
%P 5
%C
\end{verbatim}
}

このとき、以下のようにユーザがより読み取りやすいように出力を得ることができる。

{\baselineskip 3mm
\begin{verbatim}

(line1)Id    : 1
Name  : Takahashi Kazuyuki
Birth : 1977-04-27
Addr  : Saitama
Com.  : Fukuoka Softbank Howks

(line2)Id    : 2
Name  : Yuta Totsuka
Birth : 1993-04-24
Addr  : Okayama
Com.  : Kurashiki

(line3)Id    : 3
Name  : Kubo Shota
Birth : 1993-04-16
Addr  : Ehime
Com.  : Matuyamakita

(line4)Id    : 4
Name  : Oigawa Satoshi
Birth : 1993-04-18
Addr  : Shimane
Com.  : Matueminami

(line1)Id    : 1
Name  : Takahashi Kazuyuki
Birth : 1977-04-27
Addr  : Saitama
Com.  : Fukuoka Softbank Howks

(line2)Id    : 2
Name  : Yuta Totsuka
Birth : 1993-04-24
Addr  : Okayama
Com.  : Kurashiki

(line3)Id    : 3
Name  : Kubo Shota
Birth : 1993-04-16
Addr  : Ehime
Com.  : Matuyamakita

(line4)Id    : 4
Name  : Oigawa Satoshi
Birth : 1993-04-18
Addr  : Shimane
Com.  : Matueminami

登録件数を確認してください．

登録件数：4件

\end{verbatim}
}

入力中の”％P 2”, "％P 0", "％P -2"はそれぞれ"前から2件表示"，"全件表示"，"後ろから2件表示"する処理を呼び出すコマンドである。
％Cは登録件数の表示をする処理を呼び出すコマンドである。

%
%	SECTION 5
%

\section{プログラム作成における考察}

\begin{verbatim}
プログラムの作成過程での考察は，分割して返された文字列を代入する際に，strncpyを使うようにした．数値の代入をするためにはatoi関数を使い値を直接代入するようにした．またcmd_print関数内では初め，すべてのnの場合分けを行いループを考え，その中のすべてで表示させていたが，記述量も多くなり，効率的では無いと考えたために，printで表示させる部分だけを別関数で作成し，ループ内に返されるように変更した．

\end{verbatim}

%
%	SECTION 6
%

\section{得られた結果に関する，あるいは諮問に対する回答}

\begin{verbatim}
struct profile *newprofileのように構造体の宣言にポインタがついているものがある．これはポインタを付けることによって，格納し，蓄積させたデータのすべてを返すのではなく先頭アドレスだけを返している．構造体内のすべての数値，文字列を返すよりも，効率が上がると考えたためである．また今回のプログラムではn件の登録件数に対し，その件数を上回る件数の表示を行おうとすると，登録件数を確認するように促し，表示がされないようにしている．この場合に表示を行った場合に，多少分かりにくくなってしまうのでは無いかと考え，まず登録件数を確認するように促すようにした．また最大の登録件数を越えて，新たなデータを登録しようとしたさいに，perse_line内で条件文により，最大登録件数になってしまっていることを伝え，そこで処理を終えるようになっている．
\end{verbatim}

\newpage

%
%	SECTION 6
%

\section{作成したプログラムのソースコード}

{\baselineskip 3mm
\begin{verbatim}
     1	#include<stdio.h>
     2	#include<stdlib.h>
     3	#include<string.h>
     4	#define MAX_LINE_LEN 1024/*一行の最大文字数*/
     5	#define MAX_STR_LEN 69/*氏名・住所の最大文字数*/
     6	#define MAX_PROFILES 10000/*蓄積させられる最大件数*/
     7	
     8	struct date{
     9	  int y;
    10	  int m;
    11	  int d;
    12	};
    13	
    14	struct profile{
    15	  int id;
    16	  char name[MAX_STR_LEN+1];
    17	  struct date birth;
    18	  char home[MAX_STR_LEN+1];
    19	  char *comment;
    20	};
    21	
    22	struct profile profile_data_store[MAX_PROFILES];/*グローバル変数*/
    23	int profile_data_nitems = 0;/*登録%C件数を数えるためのカウンタ*/
    24	
    25	
    26	int subst(char *str, char c1, char c2)
    27	{
    28	  int n=0;
    29	  while(*str!='\0'){
    30	    if(*str == c1){
    31	      *str=c2;
    32	      n++;
    33	    }
    34	      *str++;
    35	  }
    36	  return n;//変換した回数の値を返す
    37	}
    38	
    39	/*文字列操作関数','を'\0'へ*/
    40	int split(char *str, char *ret[], char sep, int max)
    41	{
    42	 int n=0;
    43	  
    44	  ret[n]=str;
    45	  n = n + 1;
    46	
    47	  while(*str && n < max){
    48	    if(*str == sep){
    49	      *str = '\0'; 
    50	      ret[n] = str + 1;
    51	      n++;
    52	    }
    53	    str++;
    54	  }
    55	  return n;
    56	}
    57	/*一行を読み込みsubstへ送る*/
    58	int get_line(char *line)
    59	{
    60	  if(fgets(line,1025,stdin) == NULL){
    61	    return 0;
    62	  }
    63	  
    64	  subst(line,'\n','\0');
    65	
    66	  return 1;
    67	}
    68	 /**
    69	  * Create a new date into D from STR like "2004-05-02".
    70	  * return: struct date *D itself
    71	  */
    72	/*Birthの分割，数値の代入*/
    73	struct date *new_date(struct date *d, char *str)
    74	 {
    75	   char *ptr[3];
    76	 
    77	   if (split(str, ptr, '-', 3) != 3)
    78	     return NULL;
    79	
    80	   d->y = atoi(ptr[0]);
    81	   d->m = atoi(ptr[1]);
    82	   d->d = atoi(ptr[2]);
    83	 
    84	   return d;
    85	 }
    86	 /**
    87	  * Create a new profile into P from CSV string like
    88	  *  "0,Takahashi Kazuyuki,1977-04-27,Saitama,Fukuoka Softbank Hawks".
    89	  * return: struct profile *P itself
    90	  */
    91	
    92	/*CSV形式の一文を分割，文字列，値の代入・格納*/
    93	struct profile *new_profile(struct profile *p, char *csv)
    94	{
    95	  char *ptr[5];
    96	
    97	  if (split(csv, ptr, ',', 5) != 5)
    98	     return NULL; 
    99	
   100	   /* ID: id */
   101	   p->id = atoi(ptr[0]); 
   102	 
   103	   /* 学校名: name */
   104	   strncpy(p->name, ptr[1], MAX_STR_LEN);  
   105	   p->name[MAX_STR_LEN] = '\0';
   106	 
   107	   /* 設立年月日: birthday */
   108	   if (new_date(&p->birth, ptr[2]) == NULL)
   109	     return NULL; /* format error */
   110	 
   111	   /* 所在地: home */
   112	   strncpy(p->home, ptr[3], MAX_STR_LEN);//上に同じ．  
   113	   p->home[MAX_STR_LEN] = '\0';
   114	 
   115	   /*備考*/
   116	   /*malloc：指定バイト分の，メモリ領域を確保
   117	    strlen(ptr[4])+1分のメモリを確保して先頭アドレスを返す．
   118	   返却された先頭アドレスを(char*)とみなしp->commentに代入*/
   119	   p->comment = (char *)malloc(sizeof(char) * (strlen(ptr[4])+1));
   120	   strcpy(p->comment, ptr[4]);
   121	 
   122	   return p;
   123	 }
   124	
   125	
   126	/*終了*/
   127	void cmd_quit()
   128	{
   129	  exit(0); 
   130	}
   131	/*登録件数*/
   132	void cmd_check()
   133	{
   134	  printf("登録件数：%d件\n",profile_data_nitems);
   135	}
   136	/*先頭からn件表示 n = 0: 全件表示, n < 0 後ろから -n件表示*/
   137	char *date_to_string(char buf[], struct date *date)
   138	 {
   139	   sprintf(buf, "%04d-%02d-%02d", date->y, date->m, date->d);
   140	   return buf;
   141	 }
   142	
   143	
   144	void print_profile(int i,struct profile *p)/*n件表示*/
   145	{
   146	 char date[11];
   147	
   148	   printf("(line%d)\n",i+1);
   149	   printf("Id    : %d\n", p->id);
   150	   printf("Name  : %s\n", p->name);
   151	   printf("Birth : %s\n", date_to_string(date, &p->birth));
   152	   printf("Addr  : %s\n", p->home);
   153	   printf("Com.  : %s\n", p->comment);
   154	 }
   155	
   156	
   157	void cmd_print(int n)/*nで場合分け，ループ処理*/
   158	{
   159	  int i;
   160	  
   161	   if(n>0 && n<=profile_data_nitems){
   162	    for(i=0;i<n;i++){
   163	      print_profile(i,&profile_data_store[i]);
   164	      printf("\n");
   165	      }
   166	    }else if(n==0){
   167	
   168	    for(i=0;i<profile_data_nitems;i++){
   169	      print_profile(i,&profile_data_store[i]);
   170	      printf("\n");
   171	      }
   172	    }else if(n<0 && (-n)<=profile_data_nitems){
   173	    
   174	    for(i=(profile_data_nitems+n);i<profile_data_nitems;i++){
   175	       print_profile(i,&profile_data_store[i]);
   176	       printf("\n");
   177		}
   178	    }else{
   179	      printf("登録件数を確認してください．\n\n");
   180	      }
   181	}
   182	/*コマンド文字によって，適切な関数に引数などを送るり，処理を行う．*/
   183	void exec_command(char cmd, char *param)
   184	{
   185	  switch(cmd){
   186	  case'Q':cmd_quit();  break;
   187	  case'C':cmd_check(); break;
   188	  case'P':cmd_print(atoi(param)); break;
   189			   
   190	  default:printf("error\n");
   191	  }
   192	}
   193	
   194	/*一行を読み込み，コマンド，CSV形式の解析．それぞれの値をexec_command,new_profileに送る．*/
   195	int parse_line(char *line)
   196	{
   197	  int cmd;
   198	  char *param;
   199	  
   200	  if(*line == '%'){
   201	
   202	    cmd = line[1];
   203	    param = &line[3];
   204	    exec_command(cmd,param);
   205	  }else if(profile_data_nitems == MAX_PROFILES){
   206	    printf("登録限度を越えています．\n");
   207	  }else if(line[0] == '\0'){
   208	    return 0;
   209	    //printf("muri");
   210	  } else {
   211	    new_profile(&profile_data_store[profile_data_nitems++],line);
   212	/*profile_data_store[profile_data_nitems]の先頭アドレスを送り，nitemsを1増やす．*/
   213	  }
   214	}
   215	
   216	/*一行を読み込み，perse_lineへ送る．*/
   217	int main()
   218	{
   219	  int n=0;
   220	  char line[MAX_LINE_LEN+1];
   221	  while (get_line(line)){
   222	    
   223	    parse_line(line);
   224	    }
   225	  return 0;
   226	}

\end{verbatim}
}

\end{document}

